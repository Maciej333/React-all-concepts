{"version":3,"file":"static/js/483.a5a49584.chunk.js","mappings":"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","sources":["features/reactComponents/CompMultiSelect/MultiSelect/MultiSelect.tsx","features/reactComponents/CompMultiSelect/CompMultiSelect.tsx","features/reactComponents/ReactComponents.tsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { ChangeEvent, memo, useState } from 'react';\r\nimport './MultiSelect.style.scss';\r\n\r\nexport interface IMultiSelect {\r\n    id: number,\r\n    value: any,\r\n    toString: () => string\r\n}\r\n\r\nexport const changeTypeForMultiSelect = (data: any[], fun: (element: any) => string): IMultiSelect[] => {\r\n    const newTab: IMultiSelect[] = [];\r\n    data.forEach((el, id) => {\r\n        newTab.push({\r\n            id: id + 1,\r\n            value: el,\r\n            toString: () => {\r\n                return fun(el);\r\n            }\r\n        })\r\n    })\r\n    return newTab;\r\n}\r\n\r\nfunction MultiSelectElement(props: { all: IMultiSelect[], selected: number[], select: (toSelect: number[]) => void }) {\r\n\r\n    const { all, selected, select } = props;\r\n    const [search, setSearch] = useState(\"\");\r\n    const [showOptions, setShowOptions] = useState(false);\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(e.target.value);\r\n        setShowOptions(true);\r\n    }\r\n\r\n    const handleShowOptions = () => {\r\n        setShowOptions(prev => !prev);\r\n    }\r\n\r\n    const handleClickAddSelected = (id: number) => {\r\n        const newSelected = [...selected, id].sort();\r\n        select(newSelected);\r\n    }\r\n\r\n    const handleClickDeleteSelected = (id: number) => {\r\n        const newSelected = selected.filter(el => {\r\n            if (el === id) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n        select(newSelected);\r\n    }\r\n\r\n    return (\r\n        <div className='multi-select'>\r\n            <div className='multi-select-selected'>\r\n                {\r\n                    all\r\n                        .filter((el) => {\r\n                            if (selected.includes(el.id))\r\n                                return true;\r\n                            return false;\r\n                        })\r\n                        .map(el => {\r\n                            return <span\r\n                                className='selected-element'\r\n                                key={`[selected data] = ${el.id}}`}\r\n                            >\r\n                                {el.toString()}\r\n                                <span\r\n                                    className='selected-delete-btn'\r\n                                    onClick={() => handleClickDeleteSelected(el.id)}\r\n                                >\r\n                                    X\r\n                                </span>\r\n                            </span>\r\n                        })\r\n                }\r\n            </div>\r\n            <div className='multi-select-search'>\r\n                <label htmlFor='search'></label>\r\n                <input id=\"search\" name=\"search\" value={search} placeholder='search...' onChange={handleChange} />\r\n                <span className='show' onClick={handleShowOptions}>{showOptions ? \"^\" : \"v\"}</span>\r\n            </div>\r\n            <div\r\n                className='multi-select-options'\r\n                style={{ \"padding\": showOptions ? \"5px 0\" : \"0px\" }}\r\n            >\r\n                {\r\n                    showOptions ?\r\n                        all\r\n                            .filter(el => {\r\n                                if (el.toString().toLowerCase().match(search.toLowerCase()))\r\n                                    return true;\r\n                                return false;\r\n                            })\r\n                            .filter((el) => {\r\n                                if (selected.includes(el.id))\r\n                                    return false;\r\n                                return true;\r\n                            })\r\n                            .map(el => {\r\n                                return <span\r\n                                    key={`[add data] = ${el.id}}`}\r\n                                    onClick={() => handleClickAddSelected(el.id)}\r\n                                >\r\n                                    {el.toString()}\r\n                                </span>\r\n                            })\r\n                        :\r\n                        \"\"\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst MultiSelect = memo(MultiSelectElement);\r\nexport default MultiSelect;","import { useState } from 'react';\r\nimport './CompMultiSelect.style.scss';\r\nimport MultiSelect, { changeTypeForMultiSelect, IMultiSelect } from './MultiSelect/MultiSelect';\r\n\r\nexport default function CompMultiSelect() {\r\n\r\n    const [allData] = useState<IMultiSelect[]>([\r\n        {\r\n            id: 1,\r\n            value: \"Aldona\",\r\n            toString: () => { return \"Aldona\"; }\r\n        },\r\n        {\r\n            id: 2,\r\n            value: \"Jagoda\",\r\n            toString: () => { return \"Jagoda\"; }\r\n        },\r\n        {\r\n            id: 3,\r\n            value: \"Michael\",\r\n            toString: () => { return \"Michael\"; }\r\n        },\r\n        {\r\n            id: 4,\r\n            value: \"Michał\",\r\n            toString: () => { return \"Michał\"; }\r\n        }\r\n    ]);\r\n    const [selectedData, setSelectedData] = useState<number[]>([]);\r\n\r\n    const [allDataFun] = useState<{ city: string, street: string }[]>([\r\n        {\r\n            city: \"Warsaw\",\r\n            street: \"Góralska\"\r\n        },\r\n        {\r\n            city: \"Łódź\",\r\n            street: \"Fabryczna\"\r\n        },\r\n        {\r\n            city: \"Gdańsk\",\r\n            street: \"Długa\"\r\n        },\r\n        {\r\n            city: \"Kraków\",\r\n            street: \"Kolejowa\"\r\n        },\r\n    ]);\r\n    const [selectedDataFun, setSelectedDataFun] = useState<number[]>([]);\r\n\r\n    const handleSelect = (toSelect: number[]) => {\r\n        setSelectedData(toSelect);\r\n    }\r\n\r\n    const handleSelectFun = (toSelect: number[]) => {\r\n        setSelectedDataFun(toSelect);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p className='comp-p'>Multi select without mapping fun</p>\r\n            <div className='comp-multi-select'>\r\n                <span>Selected in parent by id:</span>\r\n                <div>[{\r\n                    selectedData.map(data => {\r\n                        return <span key={`[selected] = ${data}`}>{data}, </span>\r\n                    })\r\n                }]</div>\r\n                <span className='grid-top'>Pls select:</span>\r\n                <MultiSelect all={allData} selected={selectedData} select={handleSelect} />\r\n            </div>\r\n\r\n            <p className='comp-p'>Multi select with mapping fun</p>\r\n            <div className='comp-multi-select'>\r\n                <span>Selected in parent by id:</span>\r\n                <div>[{\r\n                    selectedDataFun.map(data => {\r\n                        return <span key={`[selected] = ${data}`}>{data}, </span>\r\n                    })\r\n                }]</div>\r\n                <span className='grid-top'>Pls select:</span>\r\n                <MultiSelect\r\n                    all={changeTypeForMultiSelect(allDataFun, (el) => `[${el.city}] ${el.street}`)}\r\n                    selected={selectedDataFun}\r\n                    select={handleSelectFun}\r\n                />\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import CompMultiSelect from './CompMultiSelect/CompMultiSelect';\r\nimport './ReactComponents.style.scss';\r\n\r\nexport default function ReactComponents() {\r\n    return (\r\n        <div className='react-components'>\r\n            <h1>Components</h1>\r\n\r\n            <div className='minor'>\r\n                <h2>Multi select</h2>\r\n                <CompMultiSelect />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["changeTypeForMultiSelect","data","fun","newTab","forEach","el","id","push","value","toString","MultiSelectElement","props","all","selected","select","useState","search","setSearch","showOptions","setShowOptions","className","filter","includes","map","onClick","newSelected","handleClickDeleteSelected","htmlFor","name","placeholder","onChange","e","target","prev","style","toLowerCase","match","sort","handleClickAddSelected","memo","CompMultiSelect","allData","selectedData","setSelectedData","city","street","allDataFun","selectedDataFun","setSelectedDataFun","toSelect","ReactComponents","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}